import React, { useContext, useState, useEffect } from "react";
import Breadcrumbs from "../../components/Breadcrumb";
import {
  FaFolderOpen,
  FaUser,
  FaPhoneAlt,
  FaHome,
  FaFax,
} from "react-icons/fa";
import { BiLogIn } from "react-icons/bi";
import { MdEmail } from "react-icons/md";
import { BsCardHeading } from "react-icons/bs";
import { GrPowerReset } from "react-icons/gr";
import { useForm } from "react-hook-form";
import { ErrorMessage } from "@hookform/error-message";

import generateCaptcha from "../../uitls";
import LoginPage from "../login/LoginPage";
import Modal from "../../components/Modal/Modal";
import { AuthContext } from "../../context/authContext";
import axios from "axios";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
const DOMAIN = process.env.REACT_APP_DOMAIN;

function ContactPage() {
  const [captcha, setCaptcha] = useState(generateCaptcha);
  const [open, setOpen] = useState(false);
  const { currentUser } = useContext(AuthContext);
  //console.log(currentUser);
  const {
    register,
    handleSubmit,
    watch,
    reset,
    getValues,
    formState: { errors },
  } = useForm({ criteriaMode: "all" });
  //console.log(watch("fullname"));
  const onSubmit = async (data) => {
    // console.log(data.checkCaptcha);
    // console.log(captcha);
    if (data.checkCaptcha !== captcha) {
      return false;
    }
    try {
      const response = await toast.promise(
        axios.post(`${DOMAIN}/api/contact/`, data),
        {
          pending: "ƒêang x·ª≠ l√Ω",
          success: "B·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi th√†nh c√¥ng üëå",
          error: "Xin l·ªói !Kh√¥ng th·ªÉ g·ª≠i ph·∫£n h·ªìi ü§Ø",
        }
      );
      onReset();
      //console.log(response.data);
    } catch (error) {
      console.log(error.message);
    }
    //reset();
  };

  const onReset = (data) => {
    reset();
    setCaptcha(generateCaptcha);
    reset(data.checkCaptcha);
  };

  const resetCaptcha = (data) => {
    setCaptcha(generateCaptcha);
    reset(watch("checkCaptcha"));
  };

  return (
    <>
      <div className="bg-white pt-6 relative">
        <Breadcrumbs title={"Li√™n h·ªá"} />
        <div className="p-2 bg-slate-200">
          <p>
            ƒê·ªÉ kh√¥ng ng·ª´ng n√¢ng cao ch·∫•t l∆∞·ª£ng d·ªãch v·ª• v√† ƒë√°p ·ª©ng t·ªët h∆°n n·ªØa
            c√°c y√™u c·∫ßu c·ªßa Qu√Ω kh√°ch, ch√∫ng t√¥i mong mu·ªën nh·∫≠n ƒë∆∞·ª£c c√°c th√¥ng
            tin ph·∫£n h·ªìi. N·∫øu Qu√Ω kh√°ch c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc ho·∫∑c ƒë√≥ng g√≥p n√†o,
            xin vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i theo th√¥ng tin d∆∞·ªõi ƒë√¢y. Ch√∫ng
            t√¥i s·∫Ω ph·∫£n h·ªìi l·∫°i Qu√Ω kh√°ch trong th·ªùi gian s·ªõm nh·∫•t.
          </p>
        </div>
        <div className="grid laptop:grid-cols-5 desktop:grid-cols-5 phone:grid-cols-2 tablet:grid-cols-2 gap-4 py-4 px-2">
          <div className=" col-span-3 rounded border-[#cccccc] border-solid border-[1px]">
            <div>
              <h2 className=" rounded font-bold text-[16px] bg-slate-200 py-2 px-3">
                Ban bi√™n t·∫≠p C·ªïng th√¥ng tin ƒëi·ªán t·ª≠ H·ªôi Doanh Nh√¢n Thanh H√≥a T·∫°i
                H√† N·ªôi
              </h2>
              <div className="text-[14px] px-3 py-4">
                <p className="mb-3">
                  B·ªô ph·∫≠n ti·∫øp nh·∫≠n v√† gi·∫£i quy·∫øt c√°c y√™u c·∫ßu, ƒë·ªÅ ngh·ªã, √Ω ki·∫øn
                  li√™n quan ƒë·∫øn ho·∫°t ƒë·ªông ch√≠nh c·ªßa doanh nghi·ªáp
                </p>
                <span className="flex items-center text-[14px]">
                  <FaPhoneAlt className="mr-3" />
                  ƒêi·ªán tho·∫°i: 0982 885588
                </span>
                <span className="flex items-center text-[14px]">
                  <FaFax className="mr-3" />
                  Fax: 0982 885588
                </span>
                <span className="flex items-center text-[14px]">
                  <MdEmail className="mr-3" />
                  Email: hoidoanhnhanthanhhoa.hbta@gmail.com
                </span>
              </div>
            </div>
          </div>
          <div className=" col-span-2">
            <div className="border-[1px] border-[#cccccc] border-solid rounded">
              <h2 className="text-center py-2 bg-blue-600 text-white uppercase font-bold rounded-t mb-2">
                G·ª≠i ph·∫£n h·ªìi
              </h2>
              <form
                action=""
                className="text-[#555555] p-4"
                onSubmit={handleSubmit(onSubmit)}
              >
                <div className="mb-4">
                  <div className={`flex items-center rounded overflow-hidden `}>
                    <span className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc]">
                      <FaFolderOpen />
                    </span>
                    <select
                      {...register("topic", {
                        required: "Vui l√≤ng ch·ªçn ch·ªß ƒë·ªÅ",
                      })}
                      id=""
                      className={`w-full h-[32px] text-[13px] leading-[15px] rounded-r border-[#cccccc] ${
                        errors.topic ? "border-red-500" : ""
                      }`}
                    >
                      <option value="">Ch·ªß ƒë·ªÅ b·∫°n quan t√¢m</option>
                      <option value="G·ª≠i g√≥p √Ω">G·ª≠i g√≥p √Ω</option>
                      <option value="G·ª≠i c√¢u h·ªèi">G·ª≠i c√¢u h·ªèi</option>
                    </select>
                  </div>
                  <ErrorMessage
                    errors={errors}
                    name="topic"
                    render={({ messages }) => {
                      //console.log("messages", messages);
                      return messages
                        ? Object.entries(messages).map(([type, message]) => (
                            <p
                              className="ml-10 text-[14px] text-red-500"
                              key={type}
                            >
                              {message}
                            </p>
                          ))
                        : null;
                    }}
                  />
                </div>
                <div className="mb-4">
                  <div className="flex items-center rounded overflow-hidden">
                    <span className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] ">
                      <BsCardHeading />
                    </span>
                    <div className="w-full relative">
                      <input
                        type="text"
                        className={`block focus:outline-none w-full h-[32px] text-[13px] leading-[15px] rounded-r border-[#cccccc] ${
                          errors.title ? "border-red-500 border-[1px]" : ""
                        }`}
                        {...register("title", {
                          required: "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                          minLength: {
                            value: 10,
                            message: `Vui l√≤ng nh·∫≠p √≠t nh·∫•t 10 k√Ω t·ª±`,
                          },
                        })}
                        placeholder="Ti√™u ƒë·ªÅ"
                      />
                      <span className=" text-red-600 text-[18px] absolute top-[50%] right-[10px] translate-y-[-30%]">
                        *
                      </span>
                    </div>
                  </div>
                  <ErrorMessage
                    errors={errors}
                    name="title"
                    render={({ messages }) => {
                      //console.log("messages", messages);
                      return messages
                        ? Object.entries(messages).map(([type, message]) => (
                            <p
                              className="ml-10 text-[14px] text-red-500"
                              key={type}
                            >
                              {message}
                            </p>
                          ))
                        : null;
                    }}
                  />
                </div>
                <div className="mb-4">
                  <div className="flex items-center rounded overflow-hidden">
                    <span className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] ">
                      <FaUser />
                    </span>
                    <div className="w-full relative">
                      <input
                        type="text"
                        className={`block focus:outline-none w-full h-[32px] text-[13px] leading-[15px] border-[#cccccc] ${
                          currentUser && currentUser.lastname !== null
                            ? "bg-gray-200 cursor-not-allowed"
                            : ""
                        } ${
                          errors.username ? "border-red-500 border-[1px]" : ""
                        }`}
                        {...register("username", {
                          required: currentUser
                            ? false
                            : "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                          minLength: {
                            value: currentUser ? 0 : 10,
                            message: currentUser
                              ? ""
                              : "Vui l√≤ng nh·∫≠p √≠t nh·∫•t 10 k√Ω t·ª±",
                          },
                        })}
                        // , {
                        //   required: currentUser
                        //     ? false
                        //     : "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                        //   minLength: {
                        //     value: currentUser ? 0 : 10,
                        //     message: currentUser
                        //       ? ""
                        //       : "Vui l√≤ng nh·∫≠p √≠t nh·∫•t 10 k√Ω t·ª±",
                        //   },
                        // })}
                        placeholder="H·ªç v√† t√™n"
                        defaultValue={
                          (currentUser && currentUser.displayName) ||
                          (currentUser && currentUser.firstname !== null
                            ? currentUser.firstname + " " + currentUser.lastname
                            : "")
                        }
                        //disabled={currentUser ? true : false}
                      />
                      <span className=" text-red-600 text-[18px] absolute top-[50%] right-[10px] translate-y-[-30%]">
                        *
                      </span>
                    </div>

                    {/* <button
                      type="button"
                      onClick={() => setOpen(!open)}
                      className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] "
                    >
                      <BiLogIn />
                    </button> */}

                    {currentUser ? (
                      ""
                    ) : (
                      <button
                        type="button"
                        onClick={() => setOpen(true)}
                        className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] "
                      >
                        <BiLogIn />
                      </button>
                    )}
                  </div>
                  <ErrorMessage
                    errors={errors}
                    name="username"
                    render={({ messages }) => {
                      //console.log("messages", messages);
                      return messages
                        ? Object.entries(messages).map(([type, message]) => (
                            <p
                              className="ml-10 text-[14px] text-red-500"
                              key={type}
                            >
                              {message}
                            </p>
                          ))
                        : null;
                    }}
                  />
                </div>
                <div className="mb-4">
                  <div className="flex items-center rounded overflow-hidden">
                    <span className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] ">
                      <MdEmail />
                    </span>
                    <div className="w-full relative">
                      <input
                        type="text"
                        className={`block focus:outline-none w-full h-[32px] text-[13px] leading-[15px] border-[#cccccc] ${
                          errors.email ? "border-red-500 border-[1px]" : ""
                        }`}
                        {...register("email", {
                          required: currentUser
                            ? false
                            : "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                          pattern: {
                            value:
                              /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
                            message: currentUser
                              ? false
                              : `Vui l√≤ng nh·∫≠p ƒë√∫ng email VD: 'ten123@gmail.com'`,
                          },
                        })}
                        placeholder="Email"
                        defaultValue={currentUser ? currentUser.email : ""}
                        //disabled={currentUser ? true : false}
                      />
                      <span className=" text-red-600 text-[18px] absolute top-[50%] right-[10px] translate-y-[-30%]">
                        *
                      </span>
                    </div>
                  </div>
                  <ErrorMessage
                    errors={errors}
                    name="email"
                    render={({ messages }) => {
                      return messages
                        ? Object.entries(messages).map(([type, message]) => (
                            <p
                              className="ml-10 text-[14px] text-red-500"
                              key={type}
                            >
                              {message}
                            </p>
                          ))
                        : null;
                    }}
                  />
                </div>
                <div className="mb-4">
                  <div className="flex items-center rounded overflow-hidden">
                    <span className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] ">
                      <FaPhoneAlt />
                    </span>
                    <div className="w-full relative">
                      <input
                        type="text"
                        className={`block focus:outline-none w-full h-[32px] text-[13px] leading-[15px] border-[#cccccc] ${
                          errors.phone_number
                            ? "border-red-500 border-[1px]"
                            : ""
                        }`}
                        {...register("phone_number", {
                          required: "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                          pattern: {
                            value: /^\d{10,}$/,
                            message: "Vui l√≤ng ch·ªâ nh·∫≠p b·∫±ng s·ªë VD: '0912...'",
                          },
                          minLength: {
                            value: 10,
                            message: `Vui l√≤ng nh·∫≠p √≠t nh·∫•t 10 k√Ω t·ª±`,
                          },
                        })}
                        placeholder="S·ªë ƒëi·ªán tho·∫°i"
                      />
                      <span className=" text-red-600 text-[18px] absolute top-[50%] right-[10px] translate-y-[-30%]">
                        *
                      </span>
                    </div>
                  </div>
                  <ErrorMessage
                    errors={errors}
                    name="phone_number"
                    render={({ messages }) => {
                      return messages
                        ? Object.entries(messages).map(([type, message]) => (
                            <p
                              className="ml-10 text-[14px] text-red-500"
                              key={type}
                            >
                              {message}
                            </p>
                          ))
                        : null;
                    }}
                  />
                </div>
                <div className="mb-4">
                  <div className="flex items-center rounded overflow-hidden">
                    <span className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] ">
                      <FaHome />
                    </span>
                    <input
                      type="text"
                      className={`block focus:outline-none w-full h-[32px] text-[13px] leading-[15px] border-[#cccccc] ${
                        errors.address ? "border-red-500 border-[1px]" : ""
                      }`}
                      {...register("address")}
                      placeholder="ƒê·ªãa ch·ªâ"
                    />
                  </div>
                  <ErrorMessage
                    errors={errors}
                    name="address"
                    render={({ messages }) => {
                      return messages
                        ? Object.entries(messages).map(([type, message]) => (
                            <p
                              className="ml-10 text-[14px] text-red-500"
                              key={type}
                            >
                              {message}
                            </p>
                          ))
                        : null;
                    }}
                  />
                </div>
                <div className="mb-4">
                  <div className=" relative">
                    <textarea
                      name=""
                      id=""
                      className="w-full rounded text-sm"
                      cols="10"
                      rows="2"
                      placeholder="N·ªôi dung"
                      {...register("content", {
                        required: "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                        minLength: {
                          value: 30,
                          message: `Vui l√≤ng nh·∫≠p √≠t nh·∫•t 30 k√Ω t·ª±`,
                        },
                      })}
                    ></textarea>
                    <span className=" text-red-600 text-[18px] absolute top-[20%] right-[10px] translate-y-[-30%]">
                      *
                    </span>
                  </div>
                  <ErrorMessage
                    errors={errors}
                    name="content"
                    render={({ messages }) => {
                      return messages
                        ? Object.entries(messages).map(([type, message]) => (
                            <p
                              className="ml-10 text-[14px] text-red-500"
                              key={type}
                            >
                              {message}
                            </p>
                          ))
                        : null;
                    }}
                  />
                </div>
                <div className="mb-4">
                  <div className="flex items-center">
                    <div className="wrapper">
                      <h2 className="title">{captcha}</h2>
                    </div>
                    <button
                      type="button"
                      className="ml-3"
                      onClick={resetCaptcha}
                    >
                      <GrPowerReset />
                    </button>
                  </div>
                  <div className="inline relative">
                    <input
                      type="text"
                      className="mt-2 rounded-xl text-sm"
                      {...register("checkCaptcha", {
                        required: "B·∫°n ch∆∞a nh·∫≠p m√£",
                      })}
                      placeholder="M√£ b·∫£o m·∫≠t"
                    />
                    <span className=" text-red-600 text-[18px] absolute top-[50%] right-[10px] translate-y-[-30%]">
                      *
                    </span>
                  </div>
                  <ErrorMessage
                    errors={errors}
                    name="checkCaptcha"
                    render={({ messages }) => {
                      //console.log("messages", messages);
                      return messages
                        ? Object.entries(messages).map(([type, message]) => (
                            <p
                              className="ml-10 text-[14px] text-red-500"
                              key={type}
                            >
                              {message}
                            </p>
                          ))
                        : null;
                    }}
                  />
                </div>
                <div className="text-center">
                  <button
                    type="button"
                    onClick={onReset}
                    className="text-[#333333] border-[1px] border-solid border-[#ccc] px-3 py-2 text-[13px] rounded-xl mr-2 hover:bg-slate-200"
                  >
                    Nh·∫≠p l·∫°i
                  </button>
                  <button
                    type="submit"
                    className="bg-blue-500 px-3 py-2 text-white text-[13px] rounded-xl hover:bg-blue-700"
                  >
                    G·ª≠i ƒëi
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>

        <Modal open={open} setOpen={setOpen}>
          <LoginPage className={"w-[80%]"} />
        </Modal>
      </div>
      {/* <ToastContainer
      // position="top-right"
      // autoClose={5000}
      // hideProgressBar={false}
      // newestOnTop={false}
      // closeOnClick
      // rtl={false}
      // pauseOnFocusLoss
      // draggable
      // pauseOnHover
      // theme="light"
      /> */}
    </>
  );
}

export default ContactPage;
